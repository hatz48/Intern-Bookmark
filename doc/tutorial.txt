データベース操作しましょう。
[:presentation]

* 今日は何をしますか

- データベース、データベース操作モジュールの役割を理解する.
- Dongry を使えるようになる
- 次回以降の Web アプリのための下地づくり

* カリキュラムについて

- Perl & OOP
- <strong>データベース操作 ← いまここ</strong>
-- データベース
- WAF によるウェブアプリケーション開発
-- Ridge / Web アプリケーション (サーバー側)
- JavaScript で学ぶイベントドリブン
-- JavaScript / Web アプリケーション (クライアント側)
- Webサービス企画・設計ワークショップ

* 今日の講義

** 課題

- Dongry を用いて、コマンドラインインターフェースで日記を書けるツールを作成してもらいます

** 構成

- 基本編
-- データベースの必要性
-- データベース操作モジュールの基本的な概念や使い方を紹介します
- 休憩
- 実践編
-- Dongry を使った簡単なブックマーク管理ツールの作り方をなぞります
- 課題の解説
- 補足編
-- 講義の時間では説明しきれなかったことなど.

- 駆け足で進みますのでがんばってついてきてください
- 質問があれば途中でもどんどん聞いてください

* Webアプリケーションが扱うデータ(1)

- 例えばブックマークサービスの機能
-- あるURLをブックマークする
-- 自分のブックマークを閲覧
-- あるURLをブックマークした人を閲覧

|*name|*url|*created|
|mechairoi | http://www.hatena.com/ | 2011/08/19|
|yanbe | http://www.google.com/ | 2011/08/20|
|hitode909 | http://www.google.com/ | 2011/08/21|

* Webアプリケーションが扱うデータ(2)

- ユーザ情報・何らかの投稿・後から集計したデータなど
- 耐障害性/冗長化
-- マシンが壊れてもWebサービスのデータは消えてはいけない.
- スケーラビリティ
-- サービスは成長しデータは増え続ける
-- 大量のデータから効率よく取得する必要がある.

- メモリ (Perlの変数)ではだめ.
-- アプリケーションの複数のインスタンスはメモリを共有できない
- データの永続化が必要です

* ファイルだと
1行に1ブックマーク
>||
mechairoi<>http://www.hatena.com/<>2011/08/19 06:19:10.13
yanbe<>http://www.google.com/<>2011/08/19 06:19:10.13
...
||<
- 検索
- 冗長化
-- ファイルを複数のマシンに配置？
- ファイルロック
いろいろ面倒

* そのための データベース です

- 検索/取得のために効率のよいデータの保管
- 複数のノードにデータを持って耐障害性/スケーラビリティを確保
- 高い信頼性

** 一般的なWebサービスの構成
[f:id:mechairoi:20120813084003p:image]

* 使ったことありますか?

- 関係 (リレーショナル) データベース / SQL
- OR マッパー
- DBI

* 関係データベースとは？

- 関係モデルに基づくデータベース

** 関係モデル

- 関係は属性と組 (タプル) の集合で表される
- 関係代数に基づき演算が定義される

>||
R: (ID, 名前, 誕生日) = {
   (1, 初音ミク, 2007-08-31),
   (2, 鏡音リン, 2007-12-27),
   (3, 鏡音レン, 2007-12-27),
   (4, 巡音ルカ, 2009-01-30)
}
||<

* 関係データベース

- データベースに複数のテーブルが属する
- データは表(テーブル)で表される
-- 表 = 関係、カラム = 属性、行 (レコード) = タプル

例) artist テーブル:

|*id|*name|*birthday|
|1|初音ミク|2007-08-31|
|2|鏡音リン|2007-12-27|
|3|鏡音レン|2007-12-27|
|4|巡音ルカ|2009-01-30|

album テーブル:
|*id|*artist_id|*name|*released_on|
|1|1|みくのかんづめ|2008-12-3|

** SQL

- SQL という言語により表のデータの問い合わせ、更新などを行う

>|sql|
SELECT birthday FROM artist WHERE name = '初音ミク';
SELECT * FROM artist WHERE birthday < '2009-01-01' ORDER BY birthday DESC;
||<

>|sql|
INSERT INTO artist (id, name, birthday) VALUES (5, '重音テト', '2008-04-01');
||<

>|sql|
UPDATE artist SET birthday = '2008-07-18' WHERE name LIKE '鏡音%';
||<

** キー (インデックス)

- カラムの組み合わせについてインデックス (索引) を作成することができる

- 普通のインデックス
-- そのカラムについてソートしたい時に
- プライマリキー (主キー)
-- テーブル内で一意なキー
-- まず変わらない値を設定
- ユニークキー
-- テーブル内で一意なキー (の組み合わせ)

* RDBMS

- Relational DataBase Management System
- 関係データベースの実装
-- いろいろ面倒を見てくれる
--- ファイルの配置、ロック
--- SQL の解釈
--- レプリケーション ( 複数ノードでの運用 )
--- トランザクション
- はてなでは MySQL を採用
** 前提本

<img src="http://cdn-ak.f.st-hatena.com/images/fotolife/m/motemen/20110815/20110815211306.jpg">


* Perl から RDB を使う: DBI

- Perl からデータベースに接続するモジュール
-- OR マッパーではない
- [cpan:DBI]
-- (DBD::*) MySQL、PostgreSQL、SQLite、…

* DBI を用いる

>|perl|
use DBI;
use DateTime::Format::MySQL;

# MySQLに接続
my $dbh = DBI->connect('dbi:mysql:dbname=vocaloid', 'root', '') or die $DBI::errstr;
# SQL発行
my $artists = $dbh->selectall_arrayref('SELECT * FROM artist WHERE birthday < ? ORDER BY birthday ASC', { Slice => {} }, '2008-01-01');

# [
#   {
#     'id' => '1',
#     'name' => '初音ミク',
#     'birthday' => '2007-08-31'
#   },
#   {
#     'id' => '2',
#     'name' => '鏡音リン',
#     'birthday' => '2007-12-27'
#   },
#   {
#     'id' => '3',
#     'name' => '鏡音レン',
#     'birthday' => '2007-12-27'
#   }
# ]

my $artist = $artists->[0];
$artist->{name}; # '初音ミク'
DateTime::Format::MySQL->parse_date($artist->{birthday})->strftime('%x'); # 'Aug 31, 2007'
||<

- DB とのコネクションを自分で管理
- SQL を直に書かなきゃいけない
- 結果がただのハッシュ
- 面倒
- 癖のある API (名前が似た沢山のメソッド、...)

* OR マッパーの登場です

- ORM: <strong>O</strong>bject-<strong>R</strong>elational <strong>mapping</strong> (オブジェクト関係マッピング)
-- Relational: 関係 { (1, 初音ミク, 2007-08-31) }
-- Object: オブジェクト指向でいうオブジェクト
>|perl|
[ bless { id => 1, name => "初音ミク", birthday => "2007-08-31" }, "Artist" ];
||<

* OR マッパーの基本的な機能
- DB に格納されているレコードとPerlオブジェクトとの変換
- 接続情報の管理
- SQL の生成

* OR マッパーを使った書き方 (DBIx::MoCo)

>|perl|
use Vocaloid::MoCo::Artist; # artist テーブルに対応するクラス

# SQL の自動生成
my $artists = Vocaloid::MoCo::Artist->search(
    where => {
        birthday => { '<' => '2008-01-01' },
    },
    order => 'birthday ASC',
);

# 得られた行はオブジェクト
my $artist = $artists->first;
# bless {
#   'id' => '1',
#   'name' => '初音ミク',
#   'birthday' => '2007-08-31'
# }, "Vocaloid::MoCo::Artist"

# 行のカラムへのアクセス(書き換えも可)
$artist->name; # '初音ミク'
$artist->birthday->strftime('%x'); # 'Aug 31, 2007'

# 意味的に関連する別のテーブルへのアクセスをメソッドとして定義できる
my $albums = $artist->albums;
||<

- DB への接続、SQL の生成、オブジェクトへの変換などは OR マッパーが隠蔽してくれる

* MoCo (もこ) とは?

- DBIx::MoCo
- はてなのサービスで使われている OR マッパー
- はてな社内で開発
-- jkondo (社長です) 作、現在は motemen がメンテナ
- はてなスター、はてなブックマーク、はてなハイク、うごメモはてな、はてなココ、…

* MoCo の概要

- 1 クラスが 1 テーブルに対応 (Active Record パターン)
-- 1 インスタンス = テーブルの 1 行
-- テーブルに対する操作 ↔ クラスメソッド
--- <code>MoCo::Artist->search()</code>
-- レコードに対する操作 ↔ インスタンスメソッド
--- <code>$artist->name()</code>
<!--
>|perl|
package Vocaloid::MoCo::Artist;
use base 'DBIx::MoCo';

__PACKAGE__->table('artist'); # MoCo::Artist は artist テーブルに対応

package Vocaloid::MoCo::Album;
use base 'DBIx::MoCo';

__PACKAGE__->table('album'); # MoCo::Album は album テーブルに対応
||<
-->

* ORM の問題点

- オブジェクト生成のオーバーヘッド
-- Perl のオブジェクト生成 (bless) は結構コストが高い
--- モジュールによっては更に初期化のコストが (特に DateTime は重い)
-- 数千個のオブジェクトを生成するよりSQL 1 回で済ませた方がいいかも
- 無駄なSQL
-- オブジェクト指向的に綺麗な書き方をしても、必ずしも良い SQL にはならない
--- むしろパフォーマンス悪化の要因にすらなる
--- 一度にまとめられる問い合わせがばらばらに発行されるとか
-- ORマッパー内部である程度は最適化できるけど限界がある
-- → オブジェクト指向インターフェイスでSQLを隠蔽しているのに、どんなSQLが発行されているか気にしないといけないという矛盾

>|perl|
sub has_a_method {
    my $self = shift;
    return $related_class->find(id => $self->has_a_id);
}

# こうすると @$list の要素数分 "SELECT * FROM related_table WHERE id = ?" が実行される
my @related;
for my $obj (@$list) {
    push @related, $obj->has_a_method;
}

# こっちなら "SELECT * FROM related_table WHERE id IN (?, ?, ...)" 1回で済む
my $related = $related_class->select(
    where => {
        id => {-in => [map { $_->has_a_id } @$list]},
    },
);
||<

* Dongry の概要

- id:wakabatan:detail によるデータベース操作モジュール (DBI のラッパー)
-- https://github.com/wakaba/dongry
- DBI と ORM の中間解の一つ
-- SQL を直接投げることも、 ORM っぽい気持ちで使うこともできる
-- 場面に応じて書きやすい方法を選択できる
-- 本稿では主に ORM っぽい書き方を紹介する (小規模アプリケーション向き)
--- 前ページで紹介した問題点は解消されないが、徐々に移行してゆける

>|perl|
  my $db = Dongry::Database->new
      (sources => {default => {dsn => $dsn},
                   master => {dsn => $dsn, writable => 1}});
  
  $db->execute ('CREATE TABLE table1 (col1 INT, date DATE)
                 ENGINE=InnoDB');
  $db->execute ('INSERT INTO table1 (col1) VALUES (?), (?)', [10, 2]);
  
  my $transaction = $db->transaction;
  $db->insert ('table1', [{col1 => 12, date => '2012-01-02'}]);
  $db->update ('table1', {date => '2001-10-02'},
               where => {col1 => {'<', 5}});
  $transaction->commit;
  
  $db->select ('table1', {col1 => $value})->each_as_row (sub {
    warn $_->get ('date')->ymd ('/'), "\n";
  });

  my $table = $db->table ('hoge');
  $table->create ({foo => 123, bar => 'xyz'});
  my $row = $table->find ({foo => 567});
  $row->update ({bar => 'aaa'});
||<

* Dongry::Database->new

- データベース操作用オブジェクトを作成する
- 接続先データベースを指定する
-- dsn - 接続先を DBI モジュールに指示する文字列

>|perl|
# マスター・スレーブ構成の場合の例
$db = Dongry::Database->new(
    sources => {
        default => {dsn => $slave_dsn},
        master => {dsn => $master_dsn, writable => 1},
    },
    schema => {
        artist => {
            primary_keys => ['id'],
            type => {
                name => 'text',
            },
        },
    },
);
||<

* $db->table->find

- 条件に合う行を1つ取得

>|perl|
my $artist_row = $db->table('artist')->find({name => '初音ミク'});
print $artist_row->get('birthday'), "\n";
||<

>|sql|
SELECT * FROM artist WHERE name = '初音ミク' LIMIT 1;
||<

|*id|*name|*birthday|
|1|初音ミク|2007-08-31|

* $db->table->find_all

- 条件に合う行を複数取得

>|perl|
my $artist_rows = $db->table('artist')->find_all(
    {
        name => { -prefix => '鏡音' },
    },
    order => ['id' => 'ASC'],
    # offset => 0,
    limit => 10,
);

$artist_rows->each(sub {
    print $_->get('name'), "\n";
});
||<

- 第1引数の {} 内に条件を指定する
- order で順序を指定する (カラム名 ASC|DESC)
- offset, limit で範囲を絞る

>|sql|
SELECT * FROM artist WHERE name LIKE '鏡音%' ORDER BY id ASC LIMIT 10;
||<

|*id|*name|*birthday|
|2|鏡音リン|2007-12-27|
|3|鏡音レン|2007-12-27|

- List::Ish オブジェクトが返ってくる (補足編参照)
-- 便利な arrayref

* $db->table->create

- 行の挿入

>|perl|
my $new_artist_row = $db->table('artist')->create({
    id => 5,
    name => '重音テト',
    birthday => '2008-04-01',
});
print $new_artist_row->get('name');
||<

>|sql|
INSERT INTO artist (id, name, birthday)
    VALUES (5, '重音テト', '2008-04-01');
||<

|*id|*name|*birthday|
|1|初音ミク|2007-08-31|
|2|鏡音リン|2007-12-27|
|3|鏡音レン|2007-12-27|
|4|巡音ルカ|2009-01-30|
|5|重音テト|2008-04-01|

* $row->get($column)

- 得られた行の 1 つのフィールドへの読み取りアクセス

>|perl|
$artist_row = $db->table('artist')->find({name => '初音ミク'});

# 現在の値を取得
print $artist->get('name');
||<

* $row->update({$column => $value})

- 行のフィールドの変更

>|perl|
$artist_row = $db->table('artist')->find({name => '初音ミク'});

# 新しい値を設定
$artist->update({name => '弱音ハク'});
||<

>|sql|
UPDATE artist SET name = '弱音ハク' WHERE id = 1;
||<

|*id|*name|*birthday|
|1|<del datetime="2011-08-19T08:50:33+09:00">初音ミク</del>弱音ハク|2007-08-31|
|2|鏡音リン|2007-12-27|
|3|鏡音レン|2007-12-27|
|4|巡音ルカ|2009-01-30|
|5|重音テト|2008-04-01|

* $row->delete

- 行の削除

>|perl|
$artist_row = $db->table('artist')->find({name => '初音ミク'});
$artist_row->delete;
||<

>|sql|
DELETE FROM artist WHERE id = 1;
||<

|*id|*name|*birthday|
|2|鏡音リン|2007-12-27|
|3|鏡音レン|2007-12-27|
|4|巡音ルカ|2009-01-30|

* 条件の指定

- もうすぐ休憩です

>|perl|
my $name = '初音ミク';
my $artist_rows = $db->table('artist')->find_all(
    {
        name => $name,
        birthday => { '>', $ymd1, '<', $ymd2 },
    },
);
||<

>|sql|
SELECT * FROM artist WHERE name = ? AND birthday > ? AND birthday < ?;
||<

* SQL を使った書き方

>|perl|
my $name = '初音ミク';
my $artists = $db->execute(
    'SELECT * FROM artist WHERE name = ? AND :birthday1 < birthday AND birthday < :birthday2',
    {
        name => $name,
        birthday1 => $from_date,
        birthday2 => $to_date,
    },
)->all;
$artists->each(sub {
    # $_ は行オブジェクトではなく、 bless されていないハッシュ参照
    warn $_->{name}, "\t", $_->{birthday}, "\n";
});
||<

>|sql|
SELECT * FROM artist WHERE name = '初音ミク' AND '2000-01-01' < birthday AND birthday < '2010-01-01';
||<

* セキュリティー

>|perl|
# 悪い例
my $name = '初音ミク';
my $artists = $db->execute( # 危険!
    "SELECT * FROM artist WHERE name = '$name' AND '$from_date' < birthday AND birthday < '$to_date'",
)->all;
||<

- 文字列連結は一般に安全ではない！ ( SQL インジェクション )
-- $name がユーザの入力だった場合
-- $name = q('; DROP TABLE artist; ');
- 書いたプログラムが安全かは常に気にしましょう

>|sql|
SELECT * FROM artist WHERE name = ''; DROP TABLE artist; '' AND '2000-01-01' < birthday AND birthday < '2010-01-01';
||<

* SQL / Dongry について語られなかったこと
- トランザクション
- 複数 source の切り替え
- Query オブジェクト
- inflate/deflate (休憩後)
- JOIN (テーブルの結合)

* 休憩
* bookmark.pl を作ってみよう

- 実践編です
- 小さなブックマークアプリを書いていく過程を見ていきます

** できること (大雑把に)

- ユーザは URL (エントリ) を個人のブックマークに追加し、コメントを残せる
- エントリはユーザに共通の情報を持つ (ページタイトルなど)
- とりあえず一人用で (マルチユーザも視野にいれつつ)

** add, list, delete

3 操作くらいできるようにしてみたい

- bookmark.pl add &lt;<var>url</var>&gt; [コメント]
-- ブックマークを追加

>|?|
% ./perl bookmark.pl add http://www.yahoo.co.jp/ ヤッホー
bookmarked [8] Yahoo! JAPAN <http://www.yahoo.co.jp/>
  @2011-08-16 ヤッホー
||<

- bookmark.pl list
-- ブックマークの一覧を出力

>|?|
% ./perl bookmark.pl
 *** motemen's bookmarks ***
[8] Yahoo! JAPAN <http://www.yahoo.co.jp/>
  @2011-08-16 ヤッホー
[7] The CPAN Search Site - search.cpan.org <http://search.cpan.org/>
  @2011-08-16 くぱん
[6] はてな <http://www.hatena.ne.jp/>
  @2011-08-16 はてー
[4] Google <http://www.google.com/>
  @2011-08-16 ごー
[1] motemen <http://motemen.appspot.com/>
  @2011-08-15 モテメンドットコム
||<

- bookmark.pl delete &lt;<var>id</var>&gt;
-- ブックマークを削除

>||
% ./perl bookmark.pl delete 4
deleted [4] Google <http://www.google.com/>
  @2011-08-16 ごー
||<

* …という bookmark.pl を作ってみよう

コードを手元に

>|?|
% git clone git://github.com/wakaba/Intern-Bookmark.git
% cd Intern-Bookmark
% make deps
% mysqladmin -uroot create intern_bookmark
% mysql -uroot intern_bookmark < db/schema.sql
||<

以降こんな感じでいきます

- テーブルの設計
- モデル (Active Record パターン風) の設計
- MySQL.pm を必要最低限書く
- アプリケーションのロジックを書く

* テーブルの設計

どんな概念が登場するでしょうか？
- user
- entry
-- ユーザに共通の、URL に関する情報
- bookmark
-- ユーザが URL をブックマークした情報 (ユーザ×エントリ)

** user

|*id|*name|
|1|mechairoi|
|2|motemen|
|3|yanbe|

- UNIQUE KEY (name)

** entry


|*id|*url|*title|
|1|http://www.example.com/|IANA — Example domains|
|2|http://www.hatena.ne.jp/|はてな|
|3|http://motemen.appspot.com/|motemen|

- UNIQUE KEY (url)

** bookmark


|*id|*user_id|*entry_id|*comment|
|1|1|1|例示用ドメインか〜。|
|2|1|2|はてな〜。|
|3|2|3|僕のホームページです|
|4|3|3|モテメンさんのホームページですね|
|5|3|1|example ですね|

- UNIQUE KEY (user_id, entry_id)

* コードの設計

- ロジックをモデル (MoCo) に集約
-- プログラムがすっきりする
-- テスト書きやすい
-- コマンドライン以外からも使える

* 最初に利用例を考えてみるといいです

>|perl|
# ブックマーク一覧
$user->bookmarks;

# ブックマーク追加
$user->add_bookmark(
    url => $url,
    comment => $comment,
);

# ブックマーク削除
$user->delete_bookmark($entry);
||<

- とりあえずテストを書いてみる
- とりあえず一番外側のスクリプトを書いてみる

* bookmark.pl

- アプリケーションのロジックはモデルクラス (Intern::Bookmark::Record::*) に集約
- コマンドライン周りの処理だけ記述
-- Webアプリケーションではbookmark.pl は使わない

>|perl|
#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/lib", glob "$FindBin::Bin/modules/*/lib";
use Intern::Bookmark::MySQL;
use Intern::Bookmark::Record::User;
use Pod::Usage; # for pod2usage()
use Encode::Locale;

Intern::Bookmark::MySQL->init_by_dsn('dbi:mysql:dbname=intern_bookmark;user=root;password=');

binmode STDOUT, ':encoding(console_out)';

my %HANDLERS = (
    add  => \&add_bookmark,
    list => \&list_bookmarks,
);

my $command = shift @ARGV || 'list';


my $user = Intern::Bookmark::Record::User->new_from_name($ENV{USER} // 'nobody');
my $handler = $HANDLERS{ $command } or pod2usage;

$handler->($user, @ARGV);

exit 0;

sub add_bookmark {
    my ($user, $url, $comment) = @_;

    my $bookmark = $user->add_bookmark(
        url => $url,
        comment => $comment,
    );
    print 'bookmarked ', $bookmark->as_string, "\n";
}

sub list_bookmarks {
    my ($user) = @_;

    printf " *** %s's bookmarks ***\n", $user->name;

    my $bookmarks = $user->bookmarks;
    foreach my $bookmark (@$bookmarks) {
        print $bookmark->as_string, "\n";
    }
}
||<

* Active Record パターン風に Dongryを使う流れ

- Intern::Bookmark::MySQL
-- 接続先のデータベースの情報を書くクラス
- Intern::Bookmark::Record::*
-- 各テーブルに相当するオブジェクトのクラス

これらのクラスを準備する.

** submodule として追加

>||
% git submodule add git://github.com/wakaba/dongry modules/dongry
% git submodule add git://github.com/wakaba/perl-ooutils modules/ooutils
% git submodule add git://github.com/wakaba/perl-rdb-utils modules/rdb-utils
||<

* まずは MySQL.pm を書く

- DB の接続情報を設定
- $dsn = "dbi:mysql:dbname=intern_bookmark;user=root;password="
-- DBD::mysql を使用して MySQL の intern_bookmark データベースに接続

>|perl|
package Intern::Bookmark::MySQL;
use strict;
use warnings;
use DateTime;
use Dongry::Type::DateTime;

sub init_by_dsn {
    my ($class, $dsn) = @_;

    $Dongry::Database::Registry->{bookmark} = {
        sources => {
            master => {
                dsn => $dsn,
                writable => 1,
            },
            default => {
                dsn => $dsn,
            },
        },
        schema => {
            # 省略 (後述)
        },
    };
}

1;
||<

* 各モデルクラス

>|perl|
package Intern::Bookmark::Record::User;
use strict;
use warnings;
use Dongry::Database;
use Intern::Bookmark::MySQL;

sub db {
    return Dongry::Database->load('bookmark');
}

1;
||<

- Dongry::Database->load で、Intern::Bookmark::MySQL で定義した「bookmark」データベースのオブジェクトを取得する
- その他 Record::Entry, Record::Bookmark も同じように
- 3 つのテーブルに対応する 3 つのクラス

* has_many 的なもの

ユーザーは複数のブックマークを持っているので

>|perl|
$user->bookmarks;
||<

ってやりたい

>|perl|
package Intern::Bookmark::Record::User;

...

sub bookmarks {
    my $self = shift;
    my %opts = @_;
    my $page = $opts{page} || 1;
    my $limit = $opts{limit} || 3;
    my $offset = ($page - 1) * $limit;

    return $self->db->table('bookmark')->find_all(
        { user_id => $self->id },
        limit  => $limit,
        offset => $offset,
        order  => ['created' => 'DESC'],
    )->map(sub {
        return Intern::Bookmark::Record::Bookmark->new_from_row($_);
    });
}
||<

* inflate / deflate

- $bookmark->created が DateTime オブジェクトになってると何かと便利
- $bookmark->comment は Perl 文字列として扱いたい
-- Perl の文字列 (的なもの) にはバイト列 (byte string) と utf8 文字列 (utf8 character string) の2種類があります (ちょっと面倒です)
--- 外界との入出力はつねにバイト列、プログラムの内部では文字列
--- 文字化けとか "Wide character ..." の警告を見かけたら自分がどちらを扱っているかに注意しましょう
-- 補足編も参照してください.

>|perl|
package Intern::Bookmark::MySQL;
use Dongry::Type::DateTime;

...
        schema => {
            bookmark => {
                primary_keys => ['id'],
                type => {
                    comment => 'text',
                    created => 'timestamp_as_DateTime',
                    updated => 'timestamp_as_DateTime',
                },
                default => {
                    created => sub { DateTime->now(time_zone => 'UTC') },
                    updated => sub { DateTime->now(time_zone => 'UTC') },
                },
            },
        },
...
||<

- ついでにデフォルト値も指定
-- INSERT するときに値が明示されていないと default の関数が実行される

* ロジックの実装

- ここが一番楽しいところですね！

>|perl|
package Intern::Bookmark::Record::User;
use Carp;
use Intern::Bookmark::Record::Bookmark;

sub add_bookmark {
    my ($self, %args) = @_;
    my $url = $args{url} or croak q(add_bookmark: parameter 'url' required);

    my $entry = Intern::Bookmark::Record::Entry->new_from_url($url);
    if (my $bookmark = $self->bookmark_on_entry($entry)) {
        $bookmark->comment($args{comment});
        return $bookmark;
    } else {
        return Intern::Bookmark::Record::Bookmark->create(
            user => $self,
            entry => $entry,
            comment => $args{comment},
        );
    }
}
||<

- croak: use [cpan:Carp] すると使えます
-- die と似てるけど呼び出し元で死ぬ

* テスト

- 書いたプログラムが正しいかどう確かめるか？
-- 小規模なら実際に動かしてみるのでもやっていける
--- = 大規模だとムリ
-- コードの変更の影響を完全に把握するのは無理
--- 意図せず別の機能に不具合を引き起こしていないか
-- 他人のコードの意図は把握できない
--- 昔の自分も他人です (だいたい一晩から)
- 今回は単体テストを書きましょう

** テストで書くべきこと

- 正しい条件で正しく動くこと
- おかしな条件で正しく動くこと (エラーを吐くなど)
- 境界条件で正しく動くこと

* テスト例

>|perl|
package t::Intern::Bookmark::Record::User;
use strict;
use warnings;
use base 'Test::Class';
use Test::More;
use t::Bookmark;

...

sub add_bookmark : Test(5) {
    # テストしたいメソッドの登場人物を用意
    ok my $user = Intern::Bookmark::Record::User->new_from_name('test_user_1'), 'create user';

    # メソッド実行前の状態をテスト
    is_deeply $user->bookmarks->to_a, [];

    # テストしたいメソッドを実行
    my $bookmark = $user->add_bookmark(url => 'http://www.example.com/', comment => 'nice page');

    # メソッドの返り値をテスト
    isa_ok $bookmark, 'Intern::Bookmark::Record::Bookmark';
    is $bookmark->entry->url, 'http://www.example.com/', '$bookmark url';

    # メソッド実行後の状態をテスト
    is_deeply
        $user->bookmarks->map(sub { $_->entry->url })->to_a,
        [ 'http://www.example.com/' ],
        '$user->bookmarks';
}

...

__PACKAGE__->runtests;
||<

* テスト用モジュールを書いておくと便利です

>|perl|
package t::Bookmark;
use strict;
use warnings;
use lib 'lib', glob 'modules/*/lib';
use Intern::Bookmark::MySQL;
use Dongry::Database;

Intern::Bookmark::MySQL->init_by_dsn('dbi:mysql:dbname=intern_bookmark_test;user=root;password=');

$Intern::Bookmark::Record::Entry::NO_HTTP = 1;

sub truncate_db {
    Dongry::Database->load('bookmark')->execute("TRUNCATE TABLE $_")
        for qw(user entry bookmark);
}

1;
||<

- すべてのテスト用スクリプトから use する
- 本番とは別のテスト用データベースの dsn を設定する
- HTTP アクセスしないフラグを立てる、等々

* ディレクトリ構成
>||
 - bookmark.pl
 - lib       - Bookmark  - MySQL.pm
                         - Record       - User.pm
                                        - Entry.pm
                                        - Bookmark.pm

 - t         - Bookmark.pm
             - record-user.t
             - record-entry.t

 - modules   - dongry
             - ooutils
             - rdb-utils
||<

* 以上

- かけ足で説明してきましたが、全容はもっと深いので、ソースや pod (perldoc) を読んでみてください
- 試行錯誤もいいですが人に訊くのが一番楽!!!

* 課題

- コマンドラインインターフェースで日記を書けるツール diary.pl を作成してください (必須)
- diary.pl に機能を追加してください (記事のカテゴリ機能など)

** 基本機能

- 記事の追加
- 記事の一覧表示
- 記事の編集
- 記事の削除
- マルチユーザー (ただし今回はシングルユーザーでしか利用しない)
- 基本機能の実装は次の課題で使うので必須です.

** 実行例

>||
% ./perl diary.pl add タイトル  # 記事追加
% ./perl diary.pl list          # 記事を一覧
% ./perl diary.pl edit 記事ID   # 記事を編集
% ./perl diary.pl delete 記事ID # 記事を削除
||<

** スキーマ設計 (例)

- 望むように独自のスキーマを設計してよいです
- プライマリキーには AUTO_INCREMENT を指定しておくと便利
- データベース名は intern_diary_ユーザ名 としてください

>|sql|
CREATE TABLE user (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    name VARBINARY(32) NOT NULL,
    created DATETIME NOT NULL,
    PRIMARY KEY (id),
    UNIQUE KEY (name)
);

CREATE TABLE entry (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    user_id INT UNSIGNED NOT NULL,
    title VARBINARY(255) NOT NULL,
    body BLOB NOT NULL,
    created DATETIME NOT NULL,
    updated DATETIME NOT NULL,
    PRIMARY KEY (id),
    KEY (user_id, created)
);
||<

** オプション課題 独自機能

- アプリケーションに独自の機能を追加してみてください
-- 記事のカテゴリ分け機能
-- 検索
-- などなど

** ヒント

- 設計/コード/コメント にも気を使いましょう
- テストを書きましょう
- アピールポイントなどあれば READMEファイルへ

** 諸注意

- コミット先こんな感じで

>||
Intern-Diary
            /lib/
            /t/
            /README
            /diary.pl
||<

- dongry と依存モジュールを submodule として追加しましょう
-- "modules/.../lib" を use lib (@INC に追加) する必要があります

>||
% git submodule add git://github.com/wakaba/dongry modules/dongry
% git submodule add git://github.com/wakaba/perl-ooutils modules/ooutils
% git submodule add git://github.com/wakaba/perl-rdb-utils modules/rdb-utils
||<

- DB 名
-- 評価・検証する際にバッティングしないように database 名を intern_diary_{はてな ID} としてください。

hitode909 さんだったら、

>||
CREATE DATABASE intern_diary_hitode909;
||<

** mysqldump お願い

評価のため mysqldump もお願いします。

>||
% mysqldump -uroot -Q tablename > tablename.sql
||<

保存先は mysqldump ディレクトリに
hitode909 さんだったら、

>||
% mkdir mysqldump
% mysqldump -uroot -Q intern_diary_hitode909 > mysqldump/intern_diary_hitode909.sql
||<

これも commit, push してください。

* ヒント(& BK)

** 今日書くコードは明日以降も利用します！

- CLI 以外の利用も見据えた設計を
- アプリケーションに必要な機能は Record クラス内に書きましょう

** コマンドラインに関すること

- <code>@ARGV</code> 変数
-- ./perl diary.pl hoge fuga として起動すると <code>@ARGV = ('hoge', 'fuga')</code> となります
- コマンドライン引数をパーズするには [cpan:Getopt::Long]
- 標準入力からの読み取り

>|perl|
my $data = join "\n", <STDIN>;
||<

* 開発のお供に

- [cpan:Devel::KYTProf] を使うのがオススメ
-- use するだけ

>||
croquis.local% perl -MDevel::KYTProf ./bookmark.pl add http://www.hatena.ne.jp/ はてー
    0.251 ms  [DBI::st]  SELECT * FROM user WHERE ( name = ? ) LIMIT 1 (bind: motemen) (1 rows)  | DBIx::MoCo::DataBase:344
    0.207 ms  [DBI::st]  SELECT * FROM entry WHERE ( url = ? ) LIMIT 1 (bind: http://www.hatena.ne.jp/) (0 rows)  | DBIx::MoCo::DataBase:344
   21.194 ms  [DBI::st]  DESCRIBE `entry` '%'  (5 rows)  | DBD::mysql::db:426
    0.228 ms  [DBI::st]  INSERT INTO entry ( created_on, updated_on, url) VALUES ( ?, ?, ? ) (bind: 2011-08-16 02:42:44, 2011-08-16 02:42:44, http://www.hatena.ne.jp/) (1 rows)  | DBIx::MoCo::DataBase:344
    2.012 ms  [DBI::st]  DESCRIBE `entry` '%'  (5 rows)  | DBD::mysql::db:426
    0.290 ms  [DBI::st]  SHOW INDEX FROM entry  (2 rows)  | DBIx::MoCo::DataBase:344
 5435.445 ms  [LWP::UserAgent]  GET http://www.hatena.ne.jp/  | Intern::Bookmark::MoCo::Entry:42
    0.240 ms  [DBI::st]  UPDATE entry SET title = ? WHERE ( id = ? ) (bind: はてな, 6) (1 rows)  | DBIx::MoCo::DataBase:344
    0.192 ms  [DBI::st]  SELECT * FROM bookmark WHERE ( ( entry_id = ? AND user_id = ? ) ) LIMIT 1 (bind: 6, 1) (0 rows)  | DBIx::MoCo::DataBase:344
    2.800 ms  [DBI::st]  DESCRIBE `bookmark` '%'  (6 rows)  | DBD::mysql::db:426
    0.180 ms  [DBI::st]  INSERT INTO bookmark ( comment, created_on, entry_id, updated_on, user_id) VALUES ( ?, ?, ?, ?, ? ) (bind: はてー, 2011-08-16 02:42:49, 6, 2011-08-16 02:42:49, 1) (1 rows)  | DBIx::MoCo::DataBase:344
    0.848 ms  [DBI::st]  DESCRIBE `bookmark` '%'  (6 rows)  | DBD::mysql::db:426
    0.390 ms  [DBI::st]  SHOW INDEX FROM bookmark  (5 rows)  | DBIx::MoCo::DataBase:344
    0.212 ms  [DBI::st]  SELECT * FROM entry WHERE ( id = ? ) LIMIT 1 (bind: 6) (1 rows)  | DBIx::MoCo::DataBase:344
bookmarked [6] はてな <http://www.hatena.ne.jp/>
  @2011-08-16 はてー
||<

- または環境変数 <code>MOCO_DEBUG</code> を真にする
- [cpan:Data::Dumper] いいです
- repl もいいですね ([cpan:Eval::WithLexicals], [cpan:Devel::REPL])

<!-- 前の講義でやってるはず
>|perl|
use Data::Dumper;
my $x = { foo => [1,2,3] };
print Dumper($x);
# $VAR1 = {
#           'foo' => [
#                      1,
#                      2,
#                      3
#                    ]
#         };
||<
-->

* ご清聴ありがとうございました

- 分からないことはメンターか隣りのインターンに尋ねましょう！
-- 人気の質問に関してはあとでまとめて補足をするかもしれないのでどんどん訊いてください
- 資料は グループにあります。講義で喋っていないことについても補足がありますので参考にしてください。

* 補足編
* byte string & utf8 string

<a href="http://search.cpan.org/~nwclark/perl-5.8.8/lib/utf8.pm">perldoc utf8</a>, <a href="http://search.cpan.org/~nwclark/perl-5.8.8/pod/perlunicode.pod">perlunicode</a>

- Perl の文字列にはバイト列 (byte string) と文字列 (utf8 character string) の2種類がある
- バイト列は 0x00-0xFF のバイトの並びを表す
- 文字列は U 0000～U-FFFFFFFF (32ビット環境の場合) の文字の並びを表す
-- 一般的な計算機では UTF-8 で符号化されているので utf8 文字列と呼ばれる
- バイト列と区別するとき、文字列のことを「(utf8) フラグが立っている」という

>|perl|
# 何もしないとバイト列になる (ファイルが UTF-8 なら、UTF-8 を表すバイト列になる)
$bytes = 'あいうえお';
warn length $bytes; # 15

# use utf8; プラグマの効力が及ぶ範囲では文字列になる (ファイルは UTF-8 にしておく)
use utf8;
$chars = 'あいうえお';
warn length $chars; # 5
||<

* byte/character convertion

[cpan:Encode]

- 入出力は基本的にバイト列になっている
-- ファイル、DB、HTTP、...
- Perl で文字の列を扱いたいときは原則として utf8 文字列を使うべき
-- → 入力はできるだけ早い段階で文字列に変換し、出力はできるだけ遅い段階でバイト列に変換する
- バイト列と文字列の相互変換には Encode モジュールを使う
-- encode/decode はどちらがどちらか覚えにくいけど、
--- 人間が読める文字列をある符号化方式で機械が読めるバイト列にするのが符号化 (encode)
--- 機械が読めるバイト列を人間が読める文字列にするのが復号 (decode)

>|perl|
use Encode;

$bytes = encode 'utf8', $chars& # 文字列を符号化してバイト列に
$chars = decode 'utf8', $bytes& # バイト列を復号して文字列に
||<


* List::Ish

- find_all メソッドで返ってくるオブジェクト
- ほとんどただの配列だけど、操作を Ruby っぽく書ける
- DB 操作に関わるメソッドはありません
- c.f. https://github.com/wakaba/perl-ooutils/blob/master/lib/List/Ish.pod を見よう

- <strong>push, pop, shift, unshift, add, append, prepend</strong>
- <strong>length, size</strong>
- <strong>first, last</strong>
- <strong>map</strong>, <strong>each</strong>
- <strong>grep</strong>
- find
- uniq_by
- to_a, to_list

* SQL

>|sql|
SELECT * FROM table_name
    WHERE column1 = 'value1' AND column2 < 40
    ORDER BY column3 ASC
    LIMIT 10;
||<

FROM で指定されたテーブルから、WHERE で指定された条件のレコードを、 ORDER BY の順序で、 LIMIT の個数だけ取得する。

- WHERE ... OR ...
- WHERE column1 IN ('value1', 'value2', 'value3')
- ORDER BY column2 ASC -- 昇順
- ORDER BY column2 DESC -- 降順

>|sql|
INSERT INTO table_name (column1, column2) VALUES ('value1', 'value2');
||<

>|sql|
UPDATE table_name SET column1 = 'value1' WHERE column2 = 'value2';
||<

>|sql|
DELETE table_name WHERE column1 = 'value1';
||<

DELETE table_name; だけだと大変なことに!

>|sql|
CREATE TABLE table_name (
    column1 INT UNSIGNED NOT NULL, -- 整数
    column2 VARCHAR(127) NOT NULL, -- 可変長文字列
    column3 TEXT NOT NULL, -- もっと長い文字列
    column4 TIMESTAMP DEFAULT 0, -- 日時
    PRIMARY KEY (column1),
    KEY (column2),
    KEY (column4)
) DEFAULT CHRASET=BINARY;
||<

テーブルを作る。

- PRIMARY KEY (主キー) には他のどのレコードとも異なる ID が入るカラムを指定しておく
- KEY には検索に使うカラム (WHERE で使うカラム) を指定しておく
-- 検索高速化のためのインデックスが作られる

* SQL::Abstract

詳しくは [cpan:SQL::Abstract] をみて

>|perl|
    # WHERE column = 'value'
    where => {
        column => 'value',
    },
||<

>|perl|
    # WHERE column < 40
    where => {
        column => {'<', 40},
    },
||<

>|perl|
    # WHERE column != 'value'
    where => {
        column => {'!=, 'value'},
    },
||<

>|perl|
    # WHERE column IS NULL
    where => {
        column => undef,
    },
||<

>|perl|
    # WHERE column1 = 'value1' AND column2 IN ('a', 'b', 'c')
    where => {
        column1 => 'value1',
        column2 => {-in => ['a', 'b', 'c']},
    },
||<

IN で指定する値が空でも SQL::Abstract 的には問題ないけど MySQL 的には構文エラーなので注意。

>|perl|
    # WHERE column IN () -- 構文エラー
    where => {
        column => {-in => []},
    },
||<

* Placeholder

SQL 文に「?」(placeholder) を埋め込むとその部分に入る値を別に渡せる。

>|perl|
my $sql = 'select album.id, name, title, released_on '
        . 'from artist inner join albums on artist.id = album.artist_id '
        . 'where artist.name = ?';

my $result = $dbh->selectall_hashref($sql, 'id', undef, $artist_name);
||<

「?」に $artist_name が代入される。 Dongry, MoCo, SQL::Abstract も実際は placeholder を使っている。

Placeholder を使うと、
- SQL インジェクションの心配がなくなる
- MySQL が SQL 文の構文解析結果をキャッシュしやすくなる
-- 「SELECT * FROM artist WHERE name = '初音ミク'」と「SELECT * FROM artist WHERE name = '鏡音リン'」のどちらも「SELECT * FROM artist WHERE name = ?」になる
... というメリットがある。

* トランザクションの使い方

- 複数の変更をアトミックに適用したいとき (すべての変更を適用する、またはすべての変更を取り消す、のいずれかを行い、その中間の状態にしたくないとき) はトランザクションを使います。

>|perl|
my $transaction = $db->transaction;

$db->execute(...);
...

# いずれかを呼び出す
$transaction->commit;
$transaction->rollback;
||<

トランザクション内の SELECT でロックしたい時は
>|perl|
$db->select(..., lock => 'share');  # LOCK IN SHARE MODE
$db->select(..., lock => 'update'); # FOR UPDATE
||<

* DateTime

[cpan:DateTime], [cpan:DateTime::Format::MySQL]

- Perl で日時を表すときは DateTime がよく使われる (が重い)

>|perl|
$dt = DateTime->now(time_zone => 'UTC');
$dt = DateTime->new(year => 2010, month => 8, day => 3, hour => 10, minute => 0, second => 0, time_zone => 'UTC');

$dt->add(days => 3);
$dt->subtract(hours => 4);

warn $dt->ymd('-');
warn $dt->hms(':');
||<

- データベースでは UTC (協定世界時) で保存し、表示するときに必要ならタイムゾーン変換するのが好ましい

>|perl|
warn $dt->time_zone;
$dt->set_time_zone('Asia/Tokyo');
||<

- MySQL 形式との変換には DateTime::Format::MySQL を使う

>|perl|
use DateTime::Format::MySQL;

my $dt = DateTime::Format::MySQL->parse_datetime('2010-01-01 02:02:02');
warn DateTime::Format::MySQL->format_datetime($dt);
||<

- Dongry だと Dongry::Type::DateTime / "timestamp_as_DateTime" で変換を隠蔽できる (本編参照)

- なお、本当の Perl ネイティブの時刻形式は time 関数の形式
-- ほとんどの環境では Unix の time_t = 1970年1月1日0時0分0秒 (UTC) からの秒数

>|perl|
$time = time;
warn $time;

use DateTime;
$dt = DateTime->from_epoch(epoch => $time);
warn $dt->epoch;
||<

<style>
a, a:link, a:visited { color:#000; text-decoration: none }
a { font-weight: inherit }
/* h3 {
    background-color: #333;
    text-align: center;
    font-family: serif;
} */
strong { font-weight: bold !important }
div.current pre { font-size:70% }
div.current div.pre50 pre { font-size:50% }
div.current div.pre60 pre { font-size:60% }
div.current div.pre70 pre { font-size:70% }
div.current div.pre80 pre { font-size:80% }
div.current div.pre90 pre { font-size:90% }
img[src^='http://favicon.'] { width: 1em }
pre { font-family: monospace; line-height: 1.5em }
</style>

<!--

Copyright 2008-2013 Hatena <http://www.hatena.ne.jp/>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

-->
